import { useEffect, useState } from 'react';
import { Card } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Button } from "@/components/ui/button";
import { FilterX, ChevronDown, ChevronUp } from 'lucide-react';
import { useMediaQuery } from "@/hooks/useMediaQuery";
import { statusLabels } from './VulnerabilitiesTable';
import type { Filters } from '../index';

interface VulnerabilityFiltersProps {
  filters: Filters;
  onFilterChange: (key: keyof Filters, value: string) => void;
  onClearFilters: () => void;
}

export function VulnerabilityFilters({
  filters,
  onFilterChange,
  onClearFilters
}: VulnerabilityFiltersProps) {
  const [isFiltersExpanded, setIsFiltersExpanded] = useState(false);
  const isMobile = useMediaQuery("(max-width: 768px)");
  const isTablet = useMediaQuery("(max-width: 1024px)");
  
  useEffect(() => {
    setIsFiltersExpanded(!isMobile);
  }, [isMobile]);

  const hasActiveFilters = Object.values(filters).some(
    value => value !== '' && value !== 'all'
  );

  const gridLayout = isTablet 
    ? {
        basicFilters: 'grid-cols-2',
        dateFilters: 'col-span-2',
        mainSpan: 'col-span-2'
      }
    : {
        basicFilters: 'grid-cols-4',
        dateFilters: 'col-span-1',
        mainSpan: 'col-span-1'
      };

  return (
    <Card className="p-4">      
      {isMobile && (
        <div className="flex items-center justify-between mb-4">
          <Button
            variant="ghost"
            size="sm"
            onClick={() => setIsFiltersExpanded(!isFiltersExpanded)}
            className="flex items-center gap-2"
          >
            Filters
            {isFiltersExpanded ? (
              <ChevronUp className="h-4 w-4" />
            ) : (
              <ChevronDown className="h-4 w-4" />
            )}
          </Button>
          {hasActiveFilters && (
            <Button
              variant="outline"
              size="sm"
              onClick={onClearFilters}
              className="gap-2"
            >
              <FilterX className="h-4 w-4" />
              Clear
            </Button>
          )}
        </div>
      )}
      
      <div className={`${isFiltersExpanded || !isMobile ? 'block' : 'hidden'} space-y-4`}>        
        <div className={`grid gap-4 ${gridLayout.basicFilters}`}>          
          <div className="space-y-2">
            <label className="text-sm font-medium">Search</label>
            <Input
              placeholder="Search vulnerabilities..."
              value={filters.search}
              onChange={(e) => onFilterChange('search', e.target.value)}
              className="h-9"
            />
          </div>
          
          <div className="space-y-2">
            <label className="text-sm font-medium">Severity</label>
            <Select
              value={filters.severity}
              onValueChange={(value) => onFilterChange('severity', value)}
            >
              <SelectTrigger className="h-9">
                <SelectValue placeholder="All Severities" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Severities</SelectItem>
                <SelectItem value="CRITICAL">Critical</SelectItem>
                <SelectItem value="HIGH">High</SelectItem>
                <SelectItem value="MEDIUM">Medium</SelectItem>
                <SelectItem value="LOW">Low</SelectItem>
              </SelectContent>
            </Select>
          </div>
          
          <div className="space-y-2">
            <label className="text-sm font-medium">Server Name</label>
            <Input
              placeholder="Filter by Server..."
              value={filters.vm}
              onChange={(e) => onFilterChange('vm', e.target.value)}
              className="h-9"
            />
          </div>
          
          <div className="space-y-2">
            <label className="text-sm font-medium">Package</label>
            <Input
              placeholder="Filter by package..."
              value={filters.package}
              onChange={(e) => onFilterChange('package', e.target.value)}
              className="h-9"
            />
          </div>
        </div>
        
        <div className={`grid grid-cols-4 gap-4`}>          
          <div className={`space-y-2 ${gridLayout.dateFilters}`}>
            <label className="text-sm font-medium">From Date</label>
            <Input
              type="date"
              value={filters.fromDate}
              onChange={(e) => onFilterChange('fromDate', e.target.value)}
              className="h-9"
            />
          </div>
          
          <div className={`space-y-2 ${gridLayout.dateFilters}`}>
            <label className="text-sm font-medium">To Date</label>
            <Input
              type="date"
              value={filters.toDate}
              onChange={(e) => onFilterChange('toDate', e.target.value)}
              className="h-9"
            />
          </div>
          
          <div className={`space-y-2 ${gridLayout.dateFilters}`}>
            <label className="text-sm font-medium">Scanner</label>
            <Select
              value={filters.scanner}
              onValueChange={(value) => onFilterChange('scanner', value)}
            >
              <SelectTrigger className="h-9">
                <SelectValue placeholder="All Scanners" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Scanners</SelectItem>
                <SelectItem value="TRIVY">Trivy</SelectItem>
                <SelectItem value="GRYPE">Grype</SelectItem>
              </SelectContent>
            </Select>
          </div>
          
          <div className={`space-y-2 ${gridLayout.dateFilters}`}>
            <label className="text-sm font-medium">Status</label>
            <Select
              value={filters.status}
              onValueChange={(value) => onFilterChange('status', value)}
            >
              <SelectTrigger className="h-9">
                <SelectValue placeholder="All Status" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Status</SelectItem>
                {Object.entries(statusLabels).map(([value, label]) => (
                  <SelectItem key={value} value={value}>
                    {label}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
        </div>
        
        {!isMobile && hasActiveFilters && (
          <div className="flex justify-end">
            <Button
              variant="outline"
              onClick={onClearFilters}
              className="gap-2"
            >
              <FilterX className="h-4 w-4" />
              Clear filters
            </Button>
          </div>
        )}
      </div>
    </Card>
  );
}